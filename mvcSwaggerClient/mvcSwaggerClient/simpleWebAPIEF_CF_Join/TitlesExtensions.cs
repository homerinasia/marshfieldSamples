// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using MvcSwaggerClient;
using MvcSwaggerClient.Models;

namespace MvcSwaggerClient
{
    public static partial class TitlesExtensions
    {
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Title Deletetitle(this ITitles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).DeletetitleAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Title> DeletetitleAsync(this ITitles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<MvcSwaggerClient.Models.Title> result = await operations.DeletetitleWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        public static IList<SmallTitle> GetsmallTitles(this ITitles operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).GetsmallTitlesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<SmallTitle>> GetsmallTitlesAsync(this ITitles operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<MvcSwaggerClient.Models.SmallTitle>> result = await operations.GetsmallTitlesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Title Gettitle(this ITitles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).GettitleAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Title> GettitleAsync(this ITitles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<MvcSwaggerClient.Models.Title> result = await operations.GettitleWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        public static IList<Title> Gettitles(this ITitles operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).GettitlesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Title>> GettitlesAsync(this ITitles operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<MvcSwaggerClient.Models.Title>> result = await operations.GettitlesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='title'>
        /// Required.
        /// </param>
        public static Title Posttitle(this ITitles operations, Title title)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).PosttitleAsync(title);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='title'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Title> PosttitleAsync(this ITitles operations, Title title, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<MvcSwaggerClient.Models.Title> result = await operations.PosttitleWithOperationResponseAsync(title, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='title'>
        /// Required.
        /// </param>
        public static object Puttitle(this ITitles operations, string id, Title title)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITitles)s).PuttitleAsync(id, title);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the MvcSwaggerClient.ITitles.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='title'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PuttitleAsync(this ITitles operations, string id, Title title, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PuttitleWithOperationResponseAsync(id, title, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
