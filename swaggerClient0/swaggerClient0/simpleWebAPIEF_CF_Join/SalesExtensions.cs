// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using SwaggerClient0;
using SwaggerClient0.Models;

namespace SwaggerClient0
{
    public static partial class SalesExtensions
    {
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Sale Deletesale(this ISales operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISales)s).DeletesaleAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sale> DeletesaleAsync(this ISales operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<SwaggerClient0.Models.Sale> result = await operations.DeletesaleWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Sale Getsale(this ISales operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISales)s).GetsaleAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sale> GetsaleAsync(this ISales operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<SwaggerClient0.Models.Sale> result = await operations.GetsaleWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        public static IList<Sale> Getsales(this ISales operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISales)s).GetsalesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Sale>> GetsalesAsync(this ISales operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<SwaggerClient0.Models.Sale>> result = await operations.GetsalesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='sale'>
        /// Required.
        /// </param>
        public static Sale Postsale(this ISales operations, Sale sale)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISales)s).PostsaleAsync(sale);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='sale'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Sale> PostsaleAsync(this ISales operations, Sale sale, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<SwaggerClient0.Models.Sale> result = await operations.PostsaleWithOperationResponseAsync(sale, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='sale'>
        /// Required.
        /// </param>
        public static object Putsale(this ISales operations, string id, Sale sale)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISales)s).PutsaleAsync(id, sale);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient0.ISales.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='sale'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutsaleAsync(this ISales operations, string id, Sale sale, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutsaleWithOperationResponseAsync(id, sale, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
